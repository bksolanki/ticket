/**
 * This class is generated by jOOQ
 */
package com.bhargav.sales.quickstart.tables;


import com.bhargav.sales.quickstart.Keys;
import com.bhargav.sales.quickstart.Sales;
import com.bhargav.sales.quickstart.tables.records.ItemRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Item extends TableImpl<ItemRecord> {

    private static final long serialVersionUID = 421659609;

    /**
     * The reference instance of <code>sales.item</code>
     */
    public static final Item ITEM = new Item();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItemRecord> getRecordType() {
        return ItemRecord.class;
    }

    /**
     * The column <code>sales.item.Item_id</code>.
     */
    public final TableField<ItemRecord, Integer> ITEM_ID = createField("Item_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sales.item.TicketgroupId</code>.
     */
    public final TableField<ItemRecord, Integer> TICKETGROUPID = createField("TicketgroupId", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>sales.item.hasPdf</code>.
     */
    public final TableField<ItemRecord, Byte> HASPDF = createField("hasPdf", org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * The column <code>sales.item.Barcode</code>.
     */
    public final TableField<ItemRecord, String> BARCODE = createField("Barcode", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>sales.item.Section</code>.
     */
    public final TableField<ItemRecord, String> SECTION = createField("Section", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>sales.item.irow</code>.
     */
    public final TableField<ItemRecord, String> IROW = createField("irow", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>sales.item.Seat</code>.
     */
    public final TableField<ItemRecord, String> SEAT = createField("Seat", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>sales.item.item_status</code>.
     */
    public final TableField<ItemRecord, String> ITEM_STATUS = createField("item_status", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>sales.item.hold_comment</code>.
     */
    public final TableField<ItemRecord, String> HOLD_COMMENT = createField("hold_comment", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>sales.item.InternalNotes</code>.
     */
    public final TableField<ItemRecord, String> INTERNALNOTES = createField("InternalNotes", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>sales.item.ExternalNotes</code>.
     */
    public final TableField<ItemRecord, String> EXTERNALNOTES = createField("ExternalNotes", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>sales.item.Orderid</code>.
     */
    public final TableField<ItemRecord, String> ORDERID = createField("Orderid", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>sales.item.Purchase_cust_id</code>.
     */
    public final TableField<ItemRecord, Integer> PURCHASE_CUST_ID = createField("Purchase_cust_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>sales.item.Amount</code>.
     */
    public final TableField<ItemRecord, Double> AMOUNT = createField("Amount", org.jooq.impl.SQLDataType.FLOAT, this, "");

    /**
     * The column <code>sales.item.currency</code>.
     */
    public final TableField<ItemRecord, String> CURRENCY = createField("currency", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>sales.item.Share</code>.
     */
    public final TableField<ItemRecord, Byte> SHARE = createField("Share", org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * The column <code>sales.item.Invoice_id</code>.
     */
    public final TableField<ItemRecord, Integer> INVOICE_ID = createField("Invoice_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>sales.item.event_id</code>.
     */
    public final TableField<ItemRecord, Integer> EVENT_ID = createField("event_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>sales.item</code> table reference
     */
    public Item() {
        this("item", null);
    }

    /**
     * Create an aliased <code>sales.item</code> table reference
     */
    public Item(String alias) {
        this(alias, ITEM);
    }

    private Item(String alias, Table<ItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private Item(String alias, Table<ItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sales.SALES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ItemRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ITEM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ItemRecord> getPrimaryKey() {
        return Keys.KEY_ITEM_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ItemRecord>> getKeys() {
        return Arrays.<UniqueKey<ItemRecord>>asList(Keys.KEY_ITEM_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Item as(String alias) {
        return new Item(alias, this);
    }

    /**
     * Rename this table
     */
    public Item rename(String name) {
        return new Item(name, null);
    }
}
